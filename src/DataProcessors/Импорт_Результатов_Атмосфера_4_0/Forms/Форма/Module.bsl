
&НаСервереБезКонтекста
Функция ПолучитьДанныеОСоревновании()

	// К сожалению, самый быстрый и простой способ - хардкод
	ШаблонДанныхОбЭтапеСоревнования = Новый ФиксированнаяСтруктура("Наименование, ГруппыСпортсменов, КатегорииТрасс");
	
	ЭтапыСоревнования = Новый Массив;

	// этап: квалификация
	ГруппыСпортсменовВКвалификации = Новый Массив;
	ГруппыСпортсменовВКвалификации.Добавить("Новички");
	ГруппыСпортсменовВКвалификации.Добавить("Общая");

	ДанныеОбЭтапеСоревнования = Новый Структура(ШаблонДанныхОбЭтапеСоревнования);
	ДанныеОбЭтапеСоревнования.Наименование      = "Квалификация";
	ДанныеОбЭтапеСоревнования.ГруппыСпортсменов = ГруппыСпортсменовВКвалификации; 
	ДанныеОбЭтапеСоревнования.КатегорииТрасс    = ПолучитьКатегорииТрассКвалификации();
	
	ЭтапыСоревнования.Добавить(ДанныеОбЭтапеСоревнования);
	
	// этап: финалы
	ДанныеОбЭтапеСоревнования = Новый Структура(ШаблонДанныхОбЭтапеСоревнования);
	ДанныеОбЭтапеСоревнования.Наименование = "Финалы";
	
	ЭтапыСоревнования.Добавить(ДанныеОбЭтапеСоревнования);

	// полные данные о соревновании
	ДанныеОСоревновании = Новый Структура("Наименование, Скалодром, Вид, ДатаНачалаПроведения, ДатаОкончанияПроведения, Описание, Этапы");
	
	ДанныеОСоревновании.Наименование            = "Атмосфера 4.0";
	ДанныеОСоревновании.Скалодром               = Справочники.Скалодромы.НайтиПоНаименованию("Атмосфера");
	ДанныеОСоревновании.Вид                     = Перечисления.ВидыСоревнований.Болдер;
	ДанныеОСоревновании.ДатаНачалаПроведения    = Дата(2019, 03, 16);
	ДанныеОСоревновании.ДатаОкончанияПроведения = Дата(2019, 03, 17);
	ДанныеОСоревновании.Описание =
		"Квалификация: до 40 открытых трасс разного уровня сложности (примерно от 5А до 7С). Всем участникам предоставляется возможность пробовать любые трассы по своему усмотрению без ограничения числа попыток в течение одного из четырёх предлагаемых сетов. Участники не могут наблюдать за лазанием в предыдущих сетах. Длительность каждого сета – 2 часа. Результат в квалификации определяется суммарной ценностью пройденных участником трасс (в баллах). За каждую трассу начисляются баллы по формуле Ку/Кп, где Ку- общее количество участников квалификации, Кп — количество участников, прошедших данную трассу. Количество попыток не учитывается. Занесение результатов производится участником самостоятельно на сайте.
		|
		|В финал допускаются 20 мужчин и 20 женщин, показавших лучшие результаты по итогам квалификации. Финалы проходят по правилам соревнований по боулдерингу («французская система»), старты закрытые, 5-6 трасс , время ротации 5 минут. Победители определяются по количеству пройденных трасс/бонусов и числу попыток, затраченных на их прохождение.
		|
		|Отдельно будет проходить зачет в группах: «Новички» — спортсмены, начавшие заниматься скалолазанием после 01/03/2018. Организаторы оставляют за собой право, при наличии спорных моментов, переносить участников из одной группы в другую.";

	ДанныеОСоревновании.Этапы = ЭтапыСоревнования;
	
	Возврат ДанныеОСоревновании;
		
КонецФункции // ПолучитьДанныеОСоревновании

&НаСервереБезКонтекста
Функция ПолучитьКатегорииТрассКвалификации()
	
	// т.к. есть только фотографии карточки участника, то придется хардкодить
	КатегорииТрассКвалификации = Новый Массив(34); // на самом деле трасс 33, но так заполнять удобнее
	КатегорииТрассКвалификации[ 1] = "5";
	КатегорииТрассКвалификации[ 2] = "6А";
	КатегорииТрассКвалификации[ 3] = "7А";
	КатегорииТрассКвалификации[ 4] = "6С";
	КатегорииТрассКвалификации[ 5] = "6А";
	КатегорииТрассКвалификации[ 6] = "5";
	КатегорииТрассКвалификации[ 7] = "6В";
	КатегорииТрассКвалификации[ 8] = "7В";
	КатегорииТрассКвалификации[ 9] = "5";
	КатегорииТрассКвалификации[10] = "7А";
	КатегорииТрассКвалификации[11] = "6С";
	КатегорииТрассКвалификации[12] = "6В";
	КатегорииТрассКвалификации[13] = "5";
	КатегорииТрассКвалификации[14] = "6С";
	КатегорииТрассКвалификации[15] = "6А";
	КатегорииТрассКвалификации[16] = "5";
	КатегорииТрассКвалификации[17] = "6А";
	КатегорииТрассКвалификации[18] = "7В";
	КатегорииТрассКвалификации[19] = "6С";
	КатегорииТрассКвалификации[20] = "6В";
	КатегорииТрассКвалификации[21] = "7С";
	КатегорииТрассКвалификации[22] = "6А";
	КатегорииТрассКвалификации[23] = "7А";
	КатегорииТрассКвалификации[24] = "7А";
	КатегорииТрассКвалификации[25] = "6В";
	КатегорииТрассКвалификации[26] = "5";
	КатегорииТрассКвалификации[27] = "6А";
	КатегорииТрассКвалификации[28] = "6В";
	КатегорииТрассКвалификации[29] = "6С";
	КатегорииТрассКвалификации[30] = "7А";
	КатегорииТрассКвалификации[31] = "6В";
	КатегорииТрассКвалификации[32] = "6С";
	КатегорииТрассКвалификации[33] = "7А";
	
	КатегорииТрассКвалификации.Удалить(0);
	
	// десериализуем категории трасс
	// #TODO: вынести в модель менеджера основной конфигурации
	АвтозаменаСимволовКатегорий = Новый Соответствие;
	АвтозаменаСимволовКатегорий.Вставить("А", "A");
	АвтозаменаСимволовКатегорий.Вставить("В", "B");
	АвтозаменаСимволовКатегорий.Вставить("С", "C");
	
	ЕстьОшибкиДесериализации = Ложь;
	
	Для Инд = 0 По КатегорииТрассКвалификации.Количество() - 1 Цикл
		
		КатегорияТрассКвалификации = КатегорииТрассКвалификации[Инд];

		Для каждого Элемент Из АвтозаменаСимволовКатегорий Цикл
			КатегорияТрассКвалификации = СтрЗаменить(КатегорияТрассКвалификации, Элемент.Ключ, Элемент.Значение); 
		КонецЦикла;
		
		КатегорияТрассКвалификации = Справочники.КатегорииТрасс.НайтиПоНаименованию(КатегорияТрассКвалификации, Истина);
		
		Если Не ЗначениеЗаполнено(КатегорияТрассКвалификации) Тогда
			Сообщить("Не удалось десериализовать категорию '" + КатегорииТрассКвалификации[Инд] + "' КатегорииТрасс № " + (Инд + 1) + "");
			ЕстьОшибкиДесериализации = Истина;
			Продолжить;
		КонецЕсли;
		
		КатегорииТрассКвалификации[Инд] = КатегорияТрассКвалификации;
		
	КонецЦикла;
	
	Возврат ?(ЕстьОшибкиДесериализации, Неопределено, КатегорииТрассКвалификации);
	
КонецФункции // ПолучитьКатегорииТрассКвалификации


&НаСервереБезКонтекста
Функция НайтиСоревнование(Наименование)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Соревнования.Ссылка
		|ИЗ
		|	Справочник.Соревнования КАК Соревнования
		|ГДЕ
		|	Соревнования.Наименование = &Наименование
		|	И НЕ Соревнования.ПометкаУдаления";
		
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Соревнования.ПустаяСсылка();
	КонецЕсли;	
	
КонецФункции // НайтиСоревнование

&НаСервереБезКонтекста
Функция СоздатьСоревнование(ДанныеОСоревновании)
	
	НачатьТранзакцию();
	
	// соревнование
	Соревнование = Справочники.Соревнования.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(Соревнование, ДанныеОСоревновании);
	Соревнование.Записать();
	
	Соревнование = Соревнование.Ссылка;
	
	// этапы соревнований
	Для каждого ДанныеОбЭтапе Из ДанныеОСоревновании.Этапы Цикл
		
		Этап = Справочники.ЭтапыСоревнований.СоздатьЭлемент();
		Этап.Наименование          = ДанныеОбЭтапе.Наименование;
		Этап.Владелец              = Соревнование;
		Этап.КатегорииТрассЗакрыты = (ДанныеОбЭтапе.КатегорииТрасс = Неопределено);
		
		Если Не Этап.КатегорииТрассЗакрыты Тогда
			Для каждого КатегорияТрассы Из ДанныеОбЭтапе.КатегорииТрасс Цикл
				СтрокаТрассы = Этап.Трассы.Добавить();
				СтрокаТрассы.Идентификатор = СтрокаТрассы.НомерСтроки; // идентификация по номеру
				СтрокаТрассы.Категория     = КатегорияТрассы;   
			КонецЦикла;
		КонецЕсли;
		
		Этап.РазделениеСпортсменовНаГруппы = (ДанныеОбЭтапе.ГруппыСпортсменов <> Неопределено);
		
		Этап.Записать();
		
		Этап = Этап.Ссылка;
		
		// группы спортсменов
		Если Этап.РазделениеСпортсменовНаГруппы Тогда
			Для каждого ИмяГруппыСпортсменов Из ДанныеОбЭтапе.ГруппыСпортсменов Цикл
				ГруппаСпортсменов = Справочники.ГруппыСпортсменов.СоздатьЭлемент();
				ГруппаСпортсменов.Владелец     = Этап; 
				ГруппаСпортсменов.Наименование = ИмяГруппыСпортсменов;
				ГруппаСпортсменов.Записать();
			КонецЦикла;
		КонецЕсли;
		 
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Соревнование;
	
КонецФункции // СоздатьСоревнование

&НаСервереБезКонтекста
Процедура ПометитьСоревнованиеНаУдаление(Соревнование)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Ссылка,
		|	""Помечено на удаление соревнование"" КАК Действие
		|ИЗ
		|	Справочник.Соревнования
		|ГДЕ
		|	Ссылка = &Соревнование
		|	И
		|	НЕ ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ссылка,
		|	""Помечен на удаление этап соревнования""
		|ИЗ
		|	Справочник.ЭтапыСоревнований
		|ГДЕ
		|	Владелец = &Соревнование
		|	И
		|	НЕ ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ссылка,
		|	""Помечена на удаление группа спортсменов""
		|ИЗ
		|	Справочник.ГруппыСпортсменов
		|ГДЕ
		|	Владелец.Владелец = &Соревнование
		|	И
		|	НЕ ПометкаУдаления";
		
	Запрос.УстановитьПараметр("Соревнование", Соревнование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
		Сообщить(Выборка.Действие + " '" + Выборка.Ссылка + "'");		 		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ПометитьСоревнованиеНаУдаление


&НаКлиенте
Процедура ПрочитатьРезультатыКвалификацииИзФайла()

	ЭтаФорма.Спортсмены.Очистить();

	Попытка
		Excel = Новый COMОбъект("Excel.Application");
		Excel.WorkBooks.Open(Объект.ИмяФайлаСРезультатами);
		Состояние("Обработка файла Microsoft Excel...");
	Исключение
		Сообщить("Ошибка при открытии файла с помощью Excel!");
		Сообщить("Система сообщает: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;

	// в книге должно быть 6 листов
	Если Excel.Sheets().Count() <> 6 Тогда
		Сообщить("Файл не соответствует формату: количество листов отлично от 6");
		Excel.ActiveWorkbook.Close();
		Возврат;
	КонецЕсли;

	// первые 4 листа книги относятся к квалификации
	ИменаЛистов = Новый Массив(4);
	ИменаЛистов[0] = "Новички М";
	ИменаЛистов[1] = "Новички Ж";
	ИменаЛистов[2] = "Общая группа М";
	ИменаЛистов[3] = "Общая группа Ж";

	ФайлСоответствуетФормату = Истина;

	Для Инд = 1 По ИменаЛистов.Количество() Цикл
		Если Excel.Sheets(Инд).Name <> ИменаЛистов[Инд - 1] Тогда
			Сообщить("Файл не соответствует формату: имя листа № " + Инд + " должно быть '" + ИменаЛистов[Инд - 1] + "'");
			ФайлСоответствуетФормату = Ложь;
		КонецЕсли;
	КонецЦикла;

	Если Не ФайлСоответствуетФормату Тогда
		Excel.ActiveWorkbook.Close();
		Возврат;
	КонецЕсли;
		
	// на каждой странице располагается таблица; 2-й строкой идет ее заголовок,	содержащий колонки "Место", "ФИО",
	// "Всего трасс", "Сумма баллов" и далее по две колонки на каждую трассу в первой из которых указан ее номер
	ПервыеКолонкиТаблицы = Новый Массив;
	ПервыеКолонкиТаблицы.Добавить("Место");
	ПервыеКолонкиТаблицы.Добавить("ФИО");
	ПервыеКолонкиТаблицы.Добавить("Всего трасс");
	ПервыеКолонкиТаблицы.Добавить("Сумма балов"); // да, грамотность авторов немного страдает, на этом чуть не прокололся)
	
	КатегорииТрассВКвалификации = ЭтаФорма.ДанныеОСоревновании.Этапы[0].КатегорииТрасс;
	
	Для НомЛиста = 1 По ИменаЛистов.Количество() Цикл
		
		Excel.Sheets(НомЛиста).Select();
		
		ИмяЛиста = ИменаЛистов[НомЛиста - 1];
		
		Если      Прав(ИмяЛиста, 1) = "М" Тогда
			ПолСпортсмена = ПредопределенноеЗначение("Перечисление.Пол.Мужской");
		ИначеЕсли Прав(ИмяЛиста, 1) = "Ж" Тогда
			ПолСпортсмена = ПредопределенноеЗначение("Перечисление.Пол.Женский");
		Иначе
			ВызватьИсключение "Не удалось определить пол спорсмена по имени листа '" + ИмяЛиста + "'";
		КонецЕсли;
		
		// проверим соответствие первых колонок
		ФайлСоответствуетФормату = Истина;
		
		НомСтроки = 2;
		
		Для НомКол = 1 По ПервыеКолонкиТаблицы.Количество() Цикл
			Если Excel.Cells(НомСтроки, НомКол).Value <> ПервыеКолонкиТаблицы[НомКол - 1] Тогда
				Сообщить("Файл не соответствует формату: на листе '" + ИмяЛиста + "' имя колонки № " + НомКол + " таблицы должно быть '" + ПервыеКолонкиТаблицы[НомКол - 1] + "'");
				ФайлСоответствуетФормату = Ложь;
			КонецЕсли;  
		КонецЦикла;
				
		// проверим соответствие последующих колонок
		Для НомТрассы = 1 По КатегорииТрассВКвалификации.Количество() Цикл
			
			Если Excel.Cells(НомСтроки, НомКол).Value <> НомТрассы Тогда
				Сообщить("Файл не соответствует формату: на листе '" + ИмяЛиста + "' имя колонки № " + НомКол + " таблицы должно быть '" + Строка(НомТрассы) + "'");
				ФайлСоответствуетФормату = Ложь;
			КонецЕсли;  
		
			НомКол = НомКол + 2;
		
		КонецЦикла;
			
		Если Не ФайлСоответствуетФормату Тогда
			Excel.ActiveWorkbook.Close();
			Возврат;
		КонецЕсли;
		
		// загрузим данные по пролазам
		НомСтроки = НомСтроки + 1;
		
		Пока ЗначениеЗаполнено(Excel.Cells(НомСтроки, 1).Value) Цикл
		
			НоваяСтрокаСпортсмены = ЭтаФорма.Спортсмены.Добавить();
			НоваяСтрокаСпортсмены.ФИО         = Excel.Cells(НомСтроки, 2).Value;
			НоваяСтрокаСпортсмены.Группа      = ИмяЛиста;
			НоваяСтрокаСпортсмены.Пол         = ПолСпортсмена;
			НоваяСтрокаСпортсмены.Место       = Excel.Cells(НомСтроки, 1).Value;
			НоваяСтрокаСпортсмены.ВсегоТрасс  = Excel.Cells(НомСтроки, 3).Value;
			НоваяСтрокаСпортсмены.СуммаБаллов = Excel.Cells(НомСтроки, 4).Value;
						
//			НомКол = 5;
//			
//			Для НомТрассы = 1 По КатегорииТрассВКвалификации.Количество() Цикл
//				
//				Если Excel.Cells(НомСтроки, 1).Value = "✔" Тогда
//					НоваяСтрокаРезультатыКвалификации["РезультатНаТрассе" + НомТрассы] = ПредопределенноеЗначение("Перечисление.ВидыРезультатов.Топ");
//				КонецЕсли;
//			
//				НомКол = НомКол + 2;
//			
//			КонецЦикла;
		
			НомСтроки = НомСтроки + 1;
		
		КонецЦикла;
		
	КонецЦикла;

	// закрываем Эксель
	Попытка			
		Сообщить("Чтение результатов квалификации завершено успешно");
		Excel.Quit();
	Исключение
		Сообщить("Не удалось закрыть Excel");
		Сообщить("Система сообщает: " + ОписаниеОшибки());
		Возврат;
	КонецПопытки;

КонецПроцедуры // ПрочитатьРезультатыКвалификацииИзФайла

/////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДанныеОСоревновании = ПолучитьДанныеОСоревновании();
	
	Если Не ЗначениеЗаполнено(Объект.ИмяФайлаСРезультатами) Тогда
		Объект.ИмяФайлаСРезультатами = "c:\Work\Data\Climbers\Атмосфера_2019_03\Атмосфера_4_0_result.xlsx";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЭтаФорма.Соревнование) Тогда
		ЭтаФорма.Соревнование = НайтиСоревнование(ДанныеОСоревновании.Наименование);
	КонецЕсли;
	
	// отобразим данные о соревновании
	_ОписаниеСоревнования =
		"Наименование: %1
		|Вид: %2
		|Скалодром: %3
		|Период проведения: с %4 по %5";
		
	_ОписаниеСоревнования = СтрШаблон(
		_ОписаниеСоревнования,
		ДанныеОСоревновании.Наименование,
		ДанныеОСоревновании.Вид,
		ДанныеОСоревновании.Скалодром,
		Формат(ДанныеОСоревновании.ДатаНачалаПроведения, "ДФ=dd.MM.yyyy;"),
		Формат(ДанныеОСоревновании.ДатаОкончанияПроведения, "ДФ=dd.MM.yyyy;"));
		
	Для НомЭтапа = 1 По ДанныеОСоревновании.Этапы.Количество() Цикл
		
		ДанныеОбЭтапе = ДанныеОСоревновании.Этапы[НомЭтапа - 1];
		
		_ОписаниеСоревнования = _ОписаниеСоревнования + Символы.ПС + Символы.ПС +
			СтрШаблон(
				"ЭТАП № %1 - %2:
				|	Группы спортсменов: %3",
				НомЭтапа,
				ДанныеОбЭтапе.Наименование,
				?(ДанныеОбЭтапе.ГруппыСпортсменов = Неопределено, "НЕТ", СтрСоединить(ДанныеОбЭтапе.ГруппыСпортсменов, ", ")));
	
	КонецЦикла;
		
	ЭтаФорма.ОписаниеСоревнования = _ОписаниеСоревнования; 	

КонецПроцедуры


&НаКлиенте
Процедура ИмяФайлаСРезультатамиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите файл с результатами соревнований";
	Диалог.МножественныйВыбор = Ложь;
	Диалог.Фильтр = "Файл MS Excel (.xlsx)|*.xlsx";
	
	Если Не Диалог.Выбрать() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИмяФайлаСРезультатами = Диалог.ПолноеИмяФайла;

КонецПроцедуры

&НаКлиенте
Процедура КомандаОбновитьСписокСпортсменов(Команда)
	
	Если Не ЭтаФорма.ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
		
	ПрочитатьРезультатыКвалификацииИзФайла();

КонецПроцедуры

&НаКлиенте
Процедура КомандаСоздатьСоревнование(Команда)
	
	Если ЗначениеЗаполнено(ЭтаФорма.Соревнование) И Вопрос("Текущий элемент будет помечен на удаление. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьСоревнованиеНаУдаление(ЭтаФорма.Соревнование);
	
	ЭтаФорма.Соревнование = СоздатьСоревнование(ЭтаФорма.ДанныеОСоревновании);
	
КонецПроцедуры
